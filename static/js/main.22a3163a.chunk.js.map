{"version":3,"sources":["components/layout/Header.js","firebase.js","components/pages/AddBook.js","components/pages/Actions.js","components/pages/AllPosts.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AddBook","state","title","writer","publisher","genre","handleChange","bind","handleSubmit","e","this","setState","target","name","value","preventDefault","console","log","database","ref","push","Fragment","action","onSubmit","htmlFor","id","type","onChange","required","Component","Actions","props","postId","onClick","remove","AllPosts","allPosts","on","result","data","Object","values","val","posts","i","off","map","post","App","className","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.22a3163a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Header() {\n    return (\n        <header>\n            <h2>Here is all the links</h2>\n            <Link to=\"\">Home </Link> \n            | \n            <Link to=\"/allposts\"> Your Postsripts</Link>\n            |\n            <Link to=\"/addbook\"> Add New Book </Link>\n        </header>\n    )\n}\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nlet firebaseConfig = {\n    apiKey: \"AIzaSyBoHnPLHUzd39jlc55yCrI4m1CdRFJCYBU\",\n    authDomain: \"epilogue-20ebe.firebaseapp.com\",\n    databaseURL: \"https://epilogue-20ebe.firebaseio.com\",\n    projectId: \"epilogue-20ebe\",\n    storageBucket: \"epilogue-20ebe.appspot.com\",\n    messagingSenderId: \"496723987798\",\n    appId: \"1:496723987798:web:6b02e225c79ae1cf475af7\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from '../../firebase';\n\n//display form on a page for user to fill in\n//save new postscript into state\n//display newly added postscript in your \"my postscripts page\"\n//hook it up with firebase\n\n//bonus - add a preview???\n\nexport class AddBook extends Component {\n    constructor(){\n        super();\n        this.state = {\n            title: \"\",\n            writer: \"\",\n            publisher: \"\",\n            genre: \"\"\n        };\n        //making 'this' to work in the callback\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    //state updates when user making changes\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    //on submit we are saving our form to firebase\n    handleSubmit(e){\n        e.preventDefault();\n        console.log(e);\n        const newPost = firebase.database().ref();\n\n        //adding to firebase\n        newPost.push({\n            title: this.state.title,\n            writer: this.state.writer,\n            publisher: this.state.publisher,\n            genre: this.state.genre\n        });\n\n        //clearing state\n        this.setState({\n            title: \"\",\n            writer: \"\",\n            publisher: \"\",\n            genre: \"\"\n        })\n        \n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <h2>Here you can create PostScript</h2>\n                    <form action=\"\" onSubmit={this.handleSubmit}>\n                        <label htmlFor=\"title\">Title</label>\n                        <input\n                            id = \"title\"\n                            type = \"text\" \n                            name = \"title\"\n                            onChange = {this.handleChange}\n                            value={this.state.title}\n                            required\n                        />\n\n                        <label htmlFor=\"writer\">Writer</label>\n                        <input \n                            type=\"text\"\n                            name=\"writer\"\n                            onChange={this.handleChange}\n                            value={this.state.writer}\n                            required\n                        />\n\n                        <label htmlFor=\"publisher\">Publisher</label>\n                        <input\n                            type=\"text\"\n                            name=\"publisher\"\n                            onChange={this.handleChange}\n                            value={this.state.publisher}\n                        />\n\n                        <label htmlFor=\"genre\">Genre</label>\n                        <input \n                            type=\"text\"\n                            name=\"genre\"\n                            onChange={this.handleChange}\n                            value={this.state.genre}\n                        />\n\n                        <input type=\"Submit\"/>\n                    </form>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default AddBook","import React from 'react';\nimport firebase from '../../firebase';\n\nfunction Actions(props) {\n    console.log(props.postId)\n\n    const deletePost = (e) => {\n        e.preventDefault();\n        const itemRef = firebase.database().ref(props.postId);\n        itemRef.remove();\n    }\n\n    return (\n        <div>\n            <button onClick={deletePost}>DELETE</button>\n        </div>\n    )\n}\n\nexport default Actions;\n","import React, { Component } from 'react';\nimport firebase from '../../firebase';\nimport Actions from '../pages/Actions';\n\n//display data from firebase\n//let user interact with it\n// - edit\n// - delete\n\nexport class AllPosts extends Component {\n    constructor() {\n        // adding data from firebase to state\n        super();\n        this.state = {\n            allPosts: []\n        }\n    }\n\n    componentDidMount() {\n        //set up listener to firebase database\n        const dbRef = firebase.database().ref();\n        dbRef.on('value', (result) => {\n\n            let data = Object.values(result.val());\n            let posts = [];\n\n            for (let i in data) {\n                posts.push({\n                    i,\n                    title: data[i].title,\n                    writer: data[i].writer,\n                    publisher: data[i].publisher,\n                    genre: data[i].genre\n                });\n\n                this.setState({\n                    allPosts: posts\n                });\n            }\n        })\n    }\n\n    componentWillUnmount(){\n        const dbRef = firebase.database().ref();\n        dbRef.off()\n    }\n\n    handleDelete(e){\n        console.log('delete me');\n        // let targetDiv = e.target.parentElement;\n        // console.log(targetDiv);\n        // firebase.database().ref(targetDiv).remove();\n    }\n    \n    handleEdit(){\n        console.log('edit me');\n    }\n    \n    render() {\n        console.log(this.state.allPosts)\n        return (\n            <div>\n                {this.state.allPosts.map((post) => {\n                    return (\n                        <div>\n                            <p>{post.title} by {post.writer}</p>\n                            <Actions postId={post}/>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\n\nexport default AllPosts\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Header from './components/layout/Header';\nimport AddBook from './components/pages/AddBook';\nimport AllPosts from './components/pages/AllPosts';\n\nclass App extends Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     postscript: \"\"\n  //   }\n  // }\n\n  // componentDidMount() {\n  //   const dbRef = firebase.database().ref();\n\n  //   dbRef.on('value', (response) => {\n  //     const newState = [];\n  //     const data = response.val();\n  //     for (let key in data) {\n  //       newState.push(data[key]);\n  //     }\n  //     this.setState({\n  //       postscript: newState\n  //     });\n  //   });\n  // }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <main>\n            <Route exact path=\"/\" render={props => (\n              <section>\n                <h1>Hello hello hello</h1>\n                <p>If you like to read, you probably have many things to say about books. Either you have strong opinion about character, story or just want to save your favourite quote - epilogue is here for you! </p>\n                <p>It's online book diary created for book lovers.</p>\n                <p>\"A reader lives a thousand lives before he dies. The man who never reads lives only one.\"</p>\n              </section>\n            )} />\n            <Route path=\"/addBook\" component={AddBook} />\n            <Route path=\"/allposts\" component={AllPosts} />\n            </main>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
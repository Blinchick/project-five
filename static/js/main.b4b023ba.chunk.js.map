{"version":3,"sources":["assets/header1.jpg","components/layout/Header.js","firebase.js","components/pages/AddPost.js","components/pages/Actions.js","components/pages/AllPosts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","src","require","alt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AddPost","state","title","writer","postscript","handleChange","bind","handleSubmit","e","this","setState","target","name","value","preventDefault","console","log","database","ref","push","action","onSubmit","htmlFor","id","type","onChange","required","cols","rows","Component","Actions","props","Fragment","onClick","post","postId","remove","AllPosts","allPosts","on","result","data","val","posts","i","off","map","App","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4b023ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header1.08f1750b.jpg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Header() {\n    return (\n        <header>\n            <div className=\"wrapper\">\n                <div className=\"links\">\n                        <h1>Epilogue</h1>\n                        <h2>Book Diary</h2>\n                    <ul>\n                        <li><Link to=\"\">Home</Link></li>\n                        <li><Link to=\"/allposts\">My Postsripts</Link></li>\n                        <li><Link to=\"/addpost\">Add Postscript</Link></li>\n                    </ul>\n                </div>\n            <img src={require(\"../../assets/header1.jpg\")} alt=\"Girl in pink hoodie reading a red book\"/>\n        </div>    \n        </header>\n    )\n}\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nlet firebaseConfig = {\n    apiKey: \"AIzaSyBoHnPLHUzd39jlc55yCrI4m1CdRFJCYBU\",\n    authDomain: \"epilogue-20ebe.firebaseapp.com\",\n    databaseURL: \"https://epilogue-20ebe.firebaseio.com\",\n    projectId: \"epilogue-20ebe\",\n    storageBucket: \"epilogue-20ebe.appspot.com\",\n    messagingSenderId: \"496723987798\",\n    appId: \"1:496723987798:web:6b02e225c79ae1cf475af7\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from '../../firebase';\n\n//display form on a page for user to fill in\n//save new postscript into state\n//display newly added postscript in your \"my postscripts page\"\n//hook it up with firebase\n\n//bonus - add a preview???\n//bonus - add api w bookcovers and all those shits\n\nexport class AddPost extends Component {\n    constructor(){\n        super();\n        this.state = {\n            title: \"\",\n            writer: \"\",\n            postscript: \"\"\n        };\n        //making 'this' to work in the callback\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    //state updates when user making changes\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    //on submit we are saving our form to firebase\n    handleSubmit(e){\n        e.preventDefault();\n        console.log(e);\n        const newPost = firebase.database().ref();\n\n        //adding to firebase\n        newPost.push({\n            title: this.state.title,\n            writer: this.state.writer,\n            postscript: this.state.postscript\n        });\n\n        //clearing input\n        this.setState({\n            title: \"\",\n            writer: \"\",\n            postscript:\"\"\n        })\n        \n    }\n\n    render() {\n        return (\n            <section className=\"wrapper addPost\">\n                <h2>Leave your PostScript</h2>\n                    <form action=\"\" onSubmit={this.handleSubmit}>\n                        <label htmlFor=\"title\">Title</label>\n                        <input\n                            id = \"title\"\n                            type = \"text\" \n                            name = \"title\"\n                            onChange = {this.handleChange}\n                            value={this.state.title}\n                            required\n                        />\n\n                        <label htmlFor=\"writer\">Writer</label>\n                        <input \n                            type=\"text\"\n                            name=\"writer\"\n                            onChange={this.handleChange}\n                            value={this.state.writer}\n                            required\n                        />\n\n                        <label htmlFor=\"postscript\">Your Postscript</label>\n                        <textarea\n                            name=\"postscript\"\n                            cols=\"50\"\n                            rows=\"20\"\n                            onChange={this.handleChange}\n                            value={this.state.postscript}\n                            required\n                        >\n                        </textarea>\n\n                        <button type=\"submit\">Submit</button>\n                    </form>\n            </section>\n        )\n    }\n}\n\nexport default AddPost","import React from 'react';\nimport firebase from '../../firebase';\n\nfunction Actions(props) {\n\n    const deletePost = (e) => {\n        e.preventDefault();\n        const itemRef = firebase.database().ref(props.post.postId);\n        itemRef.remove();\n    }\n\n    return (\n        <React.Fragment>\n            <button onClick={deletePost}>X</button>\n        </React.Fragment>\n    )\n}\n\nexport default Actions;\n","import React, { Component } from 'react';\nimport firebase from '../../firebase';\nimport Actions from '../pages/Actions';\n\n//display data from firebase\n//let user interact with it\n// - edit\n// - delete\n\nexport class AllPosts extends Component {\n    constructor() {\n        // adding data from firebase to state\n        super();\n        this.state = {\n            allPosts: [],\n        }\n    }\n\n    componentDidMount() {\n        //set up listener to firebase database\n        const dbRef = firebase.database().ref();\n        dbRef.on('value', (result) => {\n\n            let data = result.val();\n            let posts = [];\n\n            for (let i in data) {\n                posts.push({\n                    postId: i,\n                    title: data[i].title,\n                    writer: data[i].writer,\n                    postscript: data[i].postscript\n                });\n\n                this.setState({\n                    allPosts: posts\n                });\n            }\n        })\n    }\n\n    componentWillUnmount(){\n        const dbRef = firebase.database().ref();\n        dbRef.off()\n    }\n\n    \n    render() {\n        return (\n            <div>\n                {this.state.allPosts.map((post) => {\n                    return (\n                        <div className=\"post\">\n                            <p><strong>{post.title}</strong> by <strong>{post.writer}</strong></p>\n                            <p>{post.postscript}</p>\n                            <Actions post={post}/>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\n\nexport default AllPosts\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Header from './components/layout/Header';\nimport AddPost from './components/pages/AddPost';\nimport AllPosts from './components/pages/AllPosts';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <main>\n            <Route exact path=\"/\" render={props => (\n              <section className=\"home wrapper\">\n                <h2>Hello there</h2>\n                <p>If you like to read, you probably have many things to say about books. Either you have strong opinion about character, story or just want to save your favourite quote - epilogue is here for you! </p>\n                <p>It's online book diary created for book lovers.</p>\n                {/* <blockquote>\"A reader lives a thousand lives before he dies. The man who never reads lives only one.\"</blockquote> */}\n              </section>\n            )} />\n            <Route path=\"/addpost\" component={AddPost} />\n            <section className=\"wrapper allPosts\">\n              <Route path=\"/allposts\" component={AllPosts} />\n            </section>\n            </main>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}